# -*- coding: utf-8 -*-


#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QAction, qApp, QTableView, QLabel, QApplication, QDialog, QPushButton, \
    QLineEdit, QFileDialog
from PyQt5.QtGui import QColor, QStandardItemModel, QStandardItem

from PyQt5.QtCore import Qt

# GUI - Создание таблицы QModel, для отображения в окне программы.
def gui_hist_model(database):
    hist_list = database.message_history()
    list = QStandardItemModel()
    list.setHorizontalHeaderLabels(['Clients name', 'Last login time', 'Sent messages', 'Reсeived messages', ])

    for row in hist_list:
        user, time, sent, rcv = row
        user = QStandardItem(user) # создаем элемент
        user.setEditable(False) # редактирование
        time = QStandardItem(str(time.replace(microsecond=0)))
        time.setEditable(False)
        sent = QStandardItem(str(sent))
        sent.setEditable(False)
        rcv = QStandardItem(str(rcv))
        rcv.setEditable(False)
        list.appendRow([user, time, sent, rcv])#добавляем строку
    return list


def  gui_create_model(database):
    active_users = database.active_users_list()
    list_ = QStandardItemModel()
    list_.setHorizontalHeaderLabels(['Clients name', 'last login', 'IP address', 'Port', ])
    for row in active_users:
        user, ipaddress, port, time = row
        user = QStandardItem(user)  # создаем элемент
        user.setEditable(False)  # редактирование
        ipaddress = QStandardItem(str(ipaddress))
        ipaddress.setEditable(False)
        port = QStandardItem(str(port))
        port.setEditable(False)
        time = QStandardItem(str(time.replace(microsecond=0)))
        time.setEditable(False)
        list_.appendRow([user,ipaddress, port, time])  # добавляем строку
    return list_


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        # Настройки геометрии основного окна
        # размер окна фиксирован.
        self.setFixedSize(600, 550)
        self.setWindowTitle('Messaging Server')

        self.setAutoFillBackground(True)
        palette = self.palette()
        palette.setColor(self.backgroundRole(), QColor(207, 227, 255) )
        self.setPalette(palette)

        self.refresh_button = QAction('Refresh list', self)
        self.show_history_button = QAction('Clients History', self)
        self.config_btn = QAction('Servers Tunes', self)

        exitAction = QAction('Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.triggered.connect(qApp.quit)

        # Статусбар
        self.statusBar()

        # Тулбар
        self.toolbar = self.addToolBar('MainBar')

        self.toolbar.addAction(self.refresh_button)
        self.toolbar.addAction(self.show_history_button)
        self.toolbar.addAction(self.config_btn)
        self.toolbar.addAction(exitAction)

        # Надпись о том, что ниже список подключённых клиентов
        self.label = QLabel('Active Users List:', self)
        self.label.setFixedSize(240, 25)
        self.label.move(10, 30)

        # Окно со списком подключённых клиентов.( по умолчанию без шапки)
        self.active_clients_table = QTableView(self)
        self.active_clients_table.move(10, 55)
        self.active_clients_table.setFixedSize(580, 400)

        self.show()

class HistoryWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setWindowTitle('Users History')
        self.setFixedSize(600, 550)
        self.setAttribute(Qt.WA_DeleteOnClose)

        self.label = QLabel('ClientsHistory:', self)
        self.label.setFixedSize(240, 25)
        self.label.move(10, 10)

        self.setAutoFillBackground(True)
        palette = self.palette()
        palette.setColor(self.backgroundRole(), QColor(207, 227, 255))
        self.setPalette(palette)

        self.close_button = QPushButton('Закрыть', self)
        self.close_button.move(450, 450)
        self.close_button.clicked.connect(self.close)

        self.history_table = QTableView(self)
        self.history_table.move(10, 35)
        self.history_table.setFixedSize(580, 380)

        self.show()

# Класс окна настроек
class ConfigWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        # Настройки окна
        self.setFixedSize(365, 260)
        self.setWindowTitle('Настройки сервера')

        # Надпись о файле базы данных:
        self.db_path_label = QLabel('Путь до файла базы данных: ', self)
        self.db_path_label.move(10, 55)
        self.db_path_label.setFixedSize(240, 15)

        # Строка с путём базы
        self.db_path = QLineEdit(self)
        self.db_path.setFixedSize(250, 20)
        self.db_path.move(10, 30)
        self.db_path.setReadOnly(True)

        # Кнопка выбора пути.
        self.db_path_select = QPushButton('Обзор...', self)
        self.db_path_select.move(265, 28)

        # Функция обработчик открытия окна выбора папки
        def open_file_dialog():
            global dialog
            dialog = QFileDialog(self)
            path = dialog.getExistingDirectory()
            path = path.replace('/', '\\')
            self.db_path.insert(path)

        self.db_path_select.clicked.connect(open_file_dialog)

        # Метка с именем поля файла базы данных
        self.db_file_label = QLabel('Имя файла базы данных: ', self)
        self.db_file_label.move(10, 68)
        self.db_file_label.setFixedSize(180, 15)

        # Поле для ввода имени файла
        self.db_file = QLineEdit(self)
        self.db_file.move(200, 66)
        self.db_file.setFixedSize(150 , 20)

        # Метка с номером порта
        self.port_label = QLabel('Номер порта для соединений:', self)
        self.port_label.move(10, 108)
        self.port_label.setFixedSize(180, 15)

        # Поле для ввода номера порта
        self.port = QLineEdit(self)
        self.port.move(200, 108)
        self.port.setFixedSize(150, 20)

        # Метка с адресом для соединений
        self.ip_label = QLabel('С какого IP принимаем соединения:', self)
        self.ip_label.move(10, 148)
        self.ip_label.setFixedSize(180, 15)

        # Метка с напоминанием о пустом поле.
        self.ip_label_note = QLabel(' оставьте это поле пустым, чтобы\n принимать соединения с любых адресов.', self)
        self.ip_label_note.move(10, 168)
        self.ip_label_note.setFixedSize(500, 30)

        # Поле для ввода ip
        self.ip = QLineEdit(self)
        self.ip.move(200, 148)
        self.ip.setFixedSize(150, 20)

        # Кнопка сохранения настроек
        self.save_btn = QPushButton('Сохранить' , self)
        self.save_btn.move(170 , 220)

        # Кнапка закрытия окна
        self.close_button = QPushButton('Закрыть', self)
        self.close_button.move(265, 220)
        self.close_button.clicked.connect(self.close)

        self.show()


if __name__ == '__main__':
    APP = QApplication(sys.argv)  # точка входа, создание приложения
    WINDOW_OBJ = Ui_MainWindow()  # базовый класс для графич.элементов
    WINDOW_OBJ.statusBar().showMessage('Test Statusbar Message')
    test_list = QStandardItemModel(WINDOW_OBJ)
    test_list.setHorizontalHeaderLabels(['Имя Клиента', 'IP Адрес', 'Порт', 'Время подключения'])
    test_list.appendRow([QStandardItem('test'), QStandardItem('123.123.123.33'), QStandardItem('8800')])
    test_list.appendRow([QStandardItem('test2'), QStandardItem('236.236.236.36'), QStandardItem('6655')])
    WINDOW_OBJ.active_clients_table.setModel(test_list)
    WINDOW_OBJ.active_clients_table.resizeColumnsToContents()
    APP.exec_()

