# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'server_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QAction, qApp, QTableView, QLabel, QApplication, QDialog, QPushButton
from PyQt5.QtGui import QColor, QStandardItemModel, QStandardItem

from PyQt5.QtCore import Qt

# GUI - Создание таблицы QModel, для отображения в окне программы.
def gui_hist_model(database):
    hist_list = database.message_history()
    list = QStandardItemModel()
    list.setHorizontalHeaderLabels(['Clients name', 'Last login time', 'Sent messages', 'Reсeived messages', ])

    for row in hist_list:
        user, time, sent, rcv = row
        user = QStandardItem(user) # создаем элемент
        user.setEditable(False) # редактирование
        time = QStandardItem(str(time.replace(microsecond=0)))
        time.setEditable(False)
        sent = QStandardItem(str(sent))
        sent.setEditable(False)
        rcv = QStandardItem(str(rcv))
        rcv.setEditable(False)
        list.appendRow([user, time, sent, rcv])#добавляем строку
    return list


def  gui_create_model(database):
    active_users = database.active_users_list()
    list_ = QStandardItemModel()
    list_.setHorizontalHeaderLabels(['Clients name', 'last login', 'IP address', 'Port', ])
    for row in active_users:
        user, time, ipaddress, port = row
        user = QStandardItem(user)  # создаем элемент
        user.setEditable(False)  # редактирование
        time = QStandardItem(str(time.replace(microsecond=0)))
        time.setEditable(False)
        ipaddress = QStandardItem(str(ipaddress))
        ipaddress.setEditable(False)
        port = QStandardItem(str(port))
        port.setEditable(False)
        list_.appendRow([user, time, ipaddress, port])  # добавляем строку
    return list_


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi()
        
    def setupUi(self):
        # Настройки геометрии основного окна
        # размер окна фиксирован.
        self.setFixedSize(600, 550)
        self.setWindowTitle('Messaging Server')

        self.setAutoFillBackground(True)
        palette = self.palette()
        palette.setColor(self.backgroundRole(), QColor(207, 227, 255) )
        self.setPalette(palette)

        self.refresh_button = QAction('Refresh list', self)
        self.show_history_button = QAction('Clients History', self)

        exitAction = QAction('Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.triggered.connect(qApp.quit)

        # Статусбар
        # dock widget
        self.statusBar()

        # Тулбар
        self.toolbar = self.addToolBar('MainBar')

        self.toolbar.addAction(self.refresh_button)
        self.toolbar.addAction(self.show_history_button)
        self.toolbar.addAction(QAction('Servers Tunes', self))
        self.toolbar.addAction(exitAction)

        # Надпись о том, что ниже список подключённых клиентов
        self.label = QLabel('Active Users List:', self)
        self.label.setFixedSize(240, 25)
        self.label.move(10, 30)

        # Окно со списком подключённых клиентов.( по умолчанию без шапки)
        self.active_clients_table = QTableView(self)
        self.active_clients_table.move(10, 55)
        self.active_clients_table.setFixedSize(580, 400)

        self.show()

class HistoryWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setFixedSize(600, 550)
        self.setWindowTitle('Users History')
        self.setAttribute(Qt.WA_DeleteOnClose)

        self.setAutoFillBackground(True)
        palette = self.palette()
        palette.setColor(self.backgroundRole(), QColor(207, 227, 255))
        self.setPalette(palette)

        self.close_button = QPushButton('Закрыть', self)
        self.close_button.move(250, 650)
        self.close_button.clicked.connect(self.close)

        self.history_table = QTableView(self)
        self.history_table.move(10, 55)
        self.history_table.setFixedSize(580, 400)



        self.show()


if __name__ == '__main__':
    APP = QApplication(sys.argv)  # точка входа, создание приложения
    WINDOW_OBJ = Ui_MainWindow()  # базовый класс для графич.элементов
    WINDOW_OBJ.statusBar().showMessage('Test Statusbar Message')
    test_list = QStandardItemModel(WINDOW_OBJ)
    test_list.setHorizontalHeaderLabels(['Имя Клиента', 'IP Адрес', 'Порт', 'Время подключения'])
    test_list.appendRow([QStandardItem('test'), QStandardItem('123.123.123.33'), QStandardItem('8800')])
    test_list.appendRow([QStandardItem('test2'), QStandardItem('236.236.236.36'), QStandardItem('6655')])
    WINDOW_OBJ.active_clients_table.setModel(test_list)
    WINDOW_OBJ.active_clients_table.resizeColumnsToContents()
    APP.exec_()